{"version":3,"sources":["components/FormEtapa1.js","components/FormEtapa2.js","components/FormEtapa3.js","components/Final.js","App.js","serviceWorker.js","index.js"],"names":["FormContainer","styled","div","FormEtapa1","props","type","onChange","onChangeValueOption","value","FormEtapa2","FormEtapa3","name","id","Final","App","mudandoValorOption","event","setState","tipoDeEstudo","target","console","log","state","clickButtonContinue","ensinoMedioCompleto","etapaAtual","ensinoMedioIncompleto","ensinoSuperiorIncompleto","ensinoSuperiorCompleto","etapa","this","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yZAIA,IAAMA,E,KAAgBC,EAAOC,IAAV,KAwCJC,MAhCR,SAAoBC,GAEvB,OAEI,kBAACJ,EAAD,KACI,sDACA,6BACI,gDACA,2BAAOK,KAAK,SACZ,iDACA,2BAAOA,KAAK,SACZ,iDACA,2BAAOA,KAAK,UAEhB,6BACI,4DACA,4BAAQC,SAAUF,EAAMG,qBACpB,4BAAQC,MAAM,KAEd,4BAAQA,MAAM,mBAAd,8BAEA,4BAAQA,MAAM,iBAAd,4BAEA,4BAAQA,MAAM,sBAAd,8BAEA,4BAAQA,MAAM,oBAAd,gCCnBLC,MAfR,WACH,OACI,6BACI,gFACA,6BACI,6CACA,2BAAOJ,KAAK,SACZ,2DACA,2BAAOA,KAAK,YCgBbK,MAvBR,SAAoBN,GACvB,OACI,6BACI,8EACA,6BACI,8FACA,2BAAOC,KAAK,UAEhB,6BACI,uEACA,4BAAQM,KAAK,QAAQC,GAAG,SACpB,4BAAQJ,MAAM,IAAd,oBAEA,4BAAQA,MAAM,IAAd,sBAEA,4BAAQA,MAAM,IAAd,qC,MCPLK,ICqDAC,E,YAzDb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KAaRW,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAACC,aAAcF,EAAMG,OAAOX,QAAQ,WAClDY,QAAQC,IAAI,EAAKC,MAAMJ,kBAhBN,EAoBnBK,oBAAsB,WACY,kBAA5B,EAAKD,MAAMJ,cACb,EAAKD,SAAS,CAACO,qBAAqB,IACpC,EAAKP,SAAS,CAACQ,YAAY,KACU,oBAA5B,EAAKH,MAAMJ,cACpB,EAAKD,SAAS,CAACS,uBAAuB,IACtC,EAAKT,SAAS,CAACQ,YAAY,KACU,uBAA5B,EAAKH,MAAMJ,cACpB,EAAKD,SAAS,CAACU,0BAA0B,IACzC,EAAKV,SAAS,CAACQ,YAAY,KACU,qBAA5B,EAAKH,MAAMJ,eACpB,EAAKD,SAAS,CAACW,wBAAwB,IACvC,EAAKX,SAAS,CAACQ,YAAY,MA9B7B,EAAKH,MAAQ,CACXJ,aAAc,GACdO,YAAY,EACZC,uBAAuB,EACvBF,qBAAqB,EACrBG,0BAA0B,EAC1BC,wBAAwB,GART,E,sEAsCnB,IAAIC,EAOJ,OALEA,EADEC,KAAKR,MAAMG,WACL,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAIR,yBAAKM,UAAU,OACX,kBAAC,EAAD,CACAxB,oBAAqBuB,KAAKf,qBAEzBc,EACD,4BAAQG,QAASF,KAAKP,qBAAtB,kB,GApDUU,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.175d814e.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\n\nconst FormContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`\n\n\n\n\nexport function FormEtapa1(props) {\n  \n    return (\n        \n        <FormContainer>\n            <h1>Etapa 1 - DADOS GERAIS</h1>\n            <div>\n                <p>1. Qual seu nome?</p>\n                <input type=\"text\"/>\n                <p>2. Qual sua idade?</p>\n                <input type=\"text\"/>\n                <p>3. Qual seu email?</p>\n                <input type=\"text\"/>\n            </div>\n            <div>\n                <p> Selecione sua escolaridade: </p>\n                <select onChange={props.onChangeValueOption}>\n                    <option value=\"\"></option>\n                    \n                    <option value=\"medioIncompleto\">Ensino Médio Incompleto</option>\n\n                    <option value=\"medioCompleto\">Ensino Médio Completo</option>\n\n                    <option value=\"superiorIncompleto\">Ensino Superior Incompleto</option>\n\n                    <option value=\"superiorCompleto\">Ensino Superior Completo</option>\n                </select>\n                \n            </div>\n        </FormContainer>\n    )\n}\nexport default FormEtapa1;\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport function FormEtapa2() {\n    return (\n        <div>\n            <h1> Etapa 2 - INFORMAÇÕES DO ENSINO SUPERIOR </h1>\n            <div>\n                <p>5. Qual curso?</p>\n                <input type=\"text\"/>\n                <p>6. Qual a unidade de ensino?</p>\n                <input type=\"text\"/>\n            </div>\n                \n        </div>\n    )\n}\n\nexport default FormEtapa2;","import React from 'react'\nimport styled from 'styled-components'\n\n\nexport function FormEtapa3(props) {\n    return (\n        <div>\n            <h1> Etapa 3 - INFORMAÇÕES GERAIS DE ENSINO </h1>\n            <div>\n                <p>5. Por que você não terminou um curso de graduação?</p>\n                <input type=\"text\"/>\n            </div>\n            <div>\n                <p>6. Você fez algum curso complementar?</p>\n                <select name=\"curso\" id=\"curso\">\n                    <option value=\"\">Curso Técnico</option>\n\n                    <option value=\"\">Curso de Inglês</option>\n\n                    <option value=\"\">Não fiz curso complementar</option>\n                </select>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default FormEtapa3;","import React from 'react'\nimport styled from 'styled-components'\n\nexport function Final() {\n    return (\n        <div>\n            <h1> O FORMULÁRIO ACABOU </h1>\n            <p>Muito obrigado por participar! Entraremos em contato!</p>\n        </div>\n    )\n}\n\nexport default Final;","import React from 'react';\nimport FormEtapa1 from './components/FormEtapa1'\nimport FormEtapa2 from './components/FormEtapa2'\nimport FormEtapa3 from './components/FormEtapa3'\nimport Final from './components/Final'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tipoDeEstudo: \"\",\n      etapaAtual: false,\n      ensinoMedioIncompleto: false,\n      ensinoMedioCompleto: false,\n      ensinoSuperiorIncompleto: false,\n      ensinoSuperiorCompleto: false\n    }\n  }\n \n \n\n  mudandoValorOption = (event) => {\n    this.setState({tipoDeEstudo: event.target.value}, () => {\n    console.log(this.state.tipoDeEstudo)\n      })\n    }\n  \n  clickButtonContinue = () => {\n    if (this.state.tipoDeEstudo === \"medioCompleto\"){\n      this.setState({ensinoMedioCompleto: true})\n      this.setState({etapaAtual: false})\n    } else if (this.state.tipoDeEstudo === \"medioIncompleto\") {\n      this.setState({ensinoMedioIncompleto: true})\n      this.setState({etapaAtual: false})\n    } else if (this.state.tipoDeEstudo === \"superiorIncompleto\") {\n      this.setState({ensinoSuperiorIncompleto: true})\n      this.setState({etapaAtual: true})\n    } else if (this.state.tipoDeEstudo === \"superiorCompleto\") {\n      this.setState({ensinoSuperiorCompleto: true})\n      this.setState({etapaAtual: true})\n    }\n}\n \n\nrender() {  \n  let etapa;\n  if (this.state.etapaAtual){\n    etapa = <FormEtapa2/>\n  } else {\n    etapa = <FormEtapa3/>\n  }\n  \n  return (\n    <div className=\"App\">\n        <FormEtapa1\n        onChangeValueOption={this.mudandoValorOption}\n        />\n        {etapa}    \n        <button onClick={this.clickButtonContinue}>Continuar</button>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}